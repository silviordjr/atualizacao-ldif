import md5 from 'js-md5'


const ldif = (users, semEmail, total) => {
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    const date = new Date()
    let dateFormat

    if (date.getHours() <= 12){
        dateFormat = `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()} ${date.getHours()}:${date.getMinutes()} AM`
    } else {
        dateFormat = `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()} ${date.getHours() - 12}:${date.getMinutes()} PM`
    }

    const cabecalho = `# LDIF Export for dc=casal,dc=al,dc=gov,dc=br
# Server: My LDAP Server (127.0.0.1)
# Search Scope: sub
# Search Filter: (objectClass=*)
# Total Entries: 1404
#
# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on ${dateFormat}
# Version: 1.2.2

version: 1

# Entry 1: dc=casal,dc=al,dc=gov,dc=br
dn: dc=casal,dc=al,dc=gov,dc=br
dc: casal
o: casal.al.gov.br
objectclass: top
objectclass: dcObject
objectclass: organization

# Entry 2: cn=admin,dc=casal,dc=al,dc=gov,dc=br
dn: cn=admin,dc=casal,dc=al,dc=gov,dc=br
cn: admin
description: LDAP administrator
objectclass: simpleSecurityObject
objectclass: organizationalRole
userpassword: {SSHA}n+IuySP5V8g2CYu7eI2uS8TrQBraFcUx

# Entry 3: cn=PCS,dc=casal,dc=al,dc=gov,dc=br
dn: cn=PCS,dc=casal,dc=al,dc=gov,dc=br
cn: PCS
gidnumber: 500
objectclass: posixGroup
objectclass: top

# Entry 4: ou=users,dc=casal,dc=al,dc=gov,dc=br
dn: ou=users,dc=casal,dc=al,dc=gov,dc=br
objectclass: organizationalUnit
objectclass: top
ou: users
`
    let corpo = ``
    let flag 
    let index = 0

    total.map((totalUser) => {
        flag = false
        users.map((user) => {
            if (totalUser.CPF === user.CPF){
                flag = true
                const nameLength = user['Nome Funcionario'].split(' ').length
    
                const newUser = `
# Entry ${index + 5}: cn=${user['Nome Funcionario']},ou=users,dc=casal,dc=al,dc=gov,dc=br
dn: cn=${user['Nome Funcionario']},ou=users,dc=casal,dc=al,dc=gov,dc=br
carlicense: ${user.CPF.replaceAll('.', '').replaceAll('-', '')}
cn: ${user['Nome Funcionario']}
employeenumber: ${Number(user.MAT)}
gidnumber: 500
givenname: ${user['Nome Funcionario'].split(' ')[0]}
mail: ${user.EMAIL}
homedirectory: /home/users/${user['Nome Funcionario'].split(' ')[0].split('')[0].toLowerCase() + user['Nome Funcionario'].split(' ')[nameLength - 1].toLowerCase() + Number(user.MAT).toString()}
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: ${user['Nome Funcionario'].split(' ')[nameLength - 1]}
uid: ${user['Nome Funcionario'].split(' ')[0].split('')[0].toLowerCase() + user['Nome Funcionario'].split(' ')[nameLength - 1].toLowerCase() + Number(user.MAT).toString()}
uidnumber: ${index + 5 + 1000}
userpassword: {MD5}${md5.base64(Number(user.MAT).toString())}
`
    
                corpo += newUser
                index = index + 1
            }
        })
        
        semEmail.map((user) => {
            if ((totalUser.CPF === user.CPF) && !flag){
                const nameLength = user['Nome Funcionario'].split(' ').length
    
                const newUser = `
# Entry ${index + 5}: cn=${user['Nome Funcionario']},ou=users,dc=casal,dc=al,dc=gov,dc=br
dn: cn=${user['Nome Funcionario']},ou=users,dc=casal,dc=al,dc=gov,dc=br
carlicense: ${user.CPF.replaceAll('.', '').replaceAll('-', '')}
cn: ${user['Nome Funcionario']}
employeenumber: ${Number(user.MAT)}
gidnumber: 500
givenname: ${user['Nome Funcionario'].split(' ')[0]}
mail: 
homedirectory: /home/users/${user['Nome Funcionario'].split(' ')[0].split('')[0].toLowerCase() + user['Nome Funcionario'].split(' ')[nameLength - 1].toLowerCase() + Number(user.MAT).toString()}
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: ${user['Nome Funcionario'].split(' ')[nameLength - 1]}
uid: ${user['Nome Funcionario'].split(' ')[0].split('')[0].toLowerCase() + user['Nome Funcionario'].split(' ')[nameLength - 1].toLowerCase() + Number(user.MAT).toString()}
uidnumber: ${index + 5 + 1000}
userpassword: {MD5}${md5.base64(Number(user.MAT).toString())}
`
    
                corpo += newUser
                index = index + 1
            }

        })
    
    })

    const ldifReturn = cabecalho + corpo

    return ldifReturn
}

export default ldif


